/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Bount3","structs":{"Campaign":[{"name":"creator","type":"address"},{"name":"ipfsHash","type":"byte[]"},{"name":"status","type":"byte[]"},{"name":"depositAmount","type":"uint64"},{"name":"payPerPerson","type":"uint64"},{"name":"goalSubmissions","type":"uint64"},{"name":"verifiedSubmissions","type":"uint64"}],"Submission":[{"name":"creator","type":"address"},{"name":"ipfsHash","type":"byte[]"},{"name":"status","type":"byte[]"},{"name":"campaignHash","type":"byte[]"}]},"methods":[{"name":"mint_coin","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createCampaign","args":[{"type":"byte[]","name":"IPFSHash"},{"type":"pay","name":"payTxn"},{"type":"uint64","name":"depositAmount"},{"type":"uint64","name":"feeAmount"},{"type":"uint64","name":"goalSubmissions"},{"type":"uint64","name":"paidAmount"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"sendSubmission","args":[{"type":"byte[]","name":"IPFSHash"},{"type":"byte[]","name":"campaignHash"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"verifySubmission","args":[{"type":"byte[]","name":"submissionHash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"declineSubmission","args":[{"type":"byte[]","name":"submissionHash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"closeCampaign","args":[{"type":"byte[]","name":"campaignHash"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"optInAsset","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"amount_earned":{"keyType":"AVMString","valueType":"AVMUint64","key":"YW1vdW50X2Vhcm5lZA=="},"asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfaWQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"campaigns":{"keyType":"AVMBytes","valueType":"Campaign","prefix":"Y2FtcGFpZ25z"},"submissions":{"keyType":"AVMBytes","valueType":"Submission","prefix":"c3VibWlzc2lvbnM="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[676,953],"errorMessage":"Already processed"},{"pc":[694],"errorMessage":"Campaign complete"},{"pc":[492,1098],"errorMessage":"Campaign not found"},{"pc":[355],"errorMessage":"Incorrect payment amount"},{"pc":[1136],"errorMessage":"Invalid campaign accounting"},{"pc":[341],"errorMessage":"Invalid receiver"},{"pc":[98],"errorMessage":"OnCompletion must be NoOp"},{"pc":[166],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[1111],"errorMessage":"Only creator can close the campaign"},{"pc":[630,927],"errorMessage":"Submission not found"},{"pc":[808,1242],"errorMessage":"check self.asset_id exists"},{"pc":[657],"errorMessage":"check self.campaigns entry exists"},{"pc":[281,462,479,618,915,1085],"errorMessage":"invalid number of bytes for (len+uint8[])"},{"pc":[303,312,321,330],"errorMessage":"invalid number of bytes for uint64"},{"pc":[295],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEIAiYHAToJY2FtcGFpZ25zCGFzc2V0X2lkC3N1Ym1pc3Npb25zCQAHUGVuZGluZwQVH3x1B1BlbmRpbmcxGEAAFIANYW1vdW50X2Vhcm5lZCJnKiJnMRtBAEAxGRREMRhEggcECO9npAQDZUvrBFclFYEEaCEdGgSfZ8SNBFjWNhkEnSkwnzYaAI4HAAkAbwEkAcAC6QOTBDYAMRkUMRgUEEMyCrFJsixJsitJsiqyKYALQm91bnQzIENvaW6yJoAFQk9VTlSyJSKyJIEGsiOB//+Pu7rWrfANsiKBA7IQIrIBsyq0PGeADG1pbnRlZF9hc3NldLCADRUffHUAB1N1Y2Nlc3OwI0M2GgFJIlklCEsBFRJESVcCADEWIwlJOBAjEkQ2GgJJFSQSRBc2GgNJFSQSRBc2GgRJFSQSRBc2GgVJFSQSRBcxAEsFOAcyChJESwFPBAhLBAhPBTgIEkRMSwIKSwQVFlcGAksFUEsCgAIARFBLARWBRAgWVwYCUE8FFlBPAhZQTwMWUCIWUExQJwRQKUsDUEm8SEy/gBFjYW1wYWlnbl9jcmVhdGVkOkxQKFBMULAnBUxQsCNDNhoBSSJZJQhLARUSRElXAgA2GgJJIlklCEsBFRJEVwIAMQApSwJQvUUBREsCFRZXBgJLA1BLAYACACZQSwEVgSYISRZXBgJPAkxQTIEJCEsEFRZXBgJLBVBMFlcGAk8CTFBPAlAnBFBMUCtLBFBJvEhMv4ATc3VibWlzc2lvbl9jcmVhdGVkOk8CUChQTwJQKFBMULAnBUxQsCNDNhoBSSJZJQhLARUSRFcCACtLAVBJvUUBREm+SEmBJFlLARVLAksCTwJSSVcCAClMUEm+REsEgSJZSwVLAUsGUlcCACcGEkRLAoE8JLoXTwOBNCS6F0sBDURPBSJLA1iACgAIVmVyaWZpZWRQTwRQSwRPAwlPBIEKCEwJFlcGAlwkTCMIFk8CTFw8SwK8SE8CSwK/SwGBJFlLAhVLA04CUlcCAClMUEm8SEsBv0xXACAyCrFPAoEsW0myCEsCsgcjshAisgGzsSIqZURPArIATLISSwGyFLIRgQSyECKyAbOAFHN1Ym1pc3Npb25fdmVyaWZpZWQ6TwJQKFBMULCAJhUffHUAIFN1Ym1pc3Npb24gdmVyaWZpZWQgYW5kIHJld2FyZGVksCNDNhoBSSJZJQhLARUSRFcCACtLAVBJvUUBREm+SEmBIllLAYEkWUsCSwJLAlJXAgAnBhJESwIiSwNYgAoACERlY2xpbmVkUEsDFU8ESwNPAlJQSwFPAwlPAoEKCEwJFlcGAlwkSwG8SExLAb+AFHN1Ym1pc3Npb25fZGVjbGluZWQ6TwJQKFBMVwAgULCAGRUffHUAE1N1Ym1pc3Npb24gZGVjbGluZWSwI0M2GgFJIlklCEsBFRJEVwIASSlMUEcCvUUBRDEASU4CSwEigSC6EkRJgTwkuhdLAYEsJLoXC0yBJCS6F0lLAg9ETAlJQQAPsUmyCEsBsgcjshAisgGzSwK8SIAQY2FtcGFpZ25fY2xvc2VkOksEUChQSwJQsIAqFR98dQAkQ2FtcGFpZ24gY2xvc2VkIGFuZCByZWZ1bmQgcHJvY2Vzc2VksCNDMQCxIiplRCKyErIRshSBBLIQIrIBs4AVFR98dQAPT3B0LWluIGNvbXBsZXRlsCND","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":5,"minor":2,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Campaign = {
  creator: string,
  ipfsHash: Uint8Array,
  status: Uint8Array,
  depositAmount: bigint,
  payPerPerson: bigint,
  goalSubmissions: bigint,
  verifiedSubmissions: bigint
}


/**
 * Converts the ABI tuple representation of a Campaign to the struct representation
 */
export function CampaignFromTuple(abiTuple: [string, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Campaign, APP_SPEC.structs) as Campaign
}

export type Submission = {
  creator: string,
  ipfsHash: Uint8Array,
  status: Uint8Array,
  campaignHash: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Submission to the struct representation
 */
export function SubmissionFromTuple(abiTuple: [string, Uint8Array, Uint8Array, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Submission, APP_SPEC.structs) as Submission
}

/**
 * The argument types for the Bount3 contract
 */
export type Bount3Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'mint_coin()string': Record<string, never>
    'createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]': {
      ipfsHash: Uint8Array
      payTxn: AppMethodCallTransactionArgument
      depositAmount: bigint | number
      feeAmount: bigint | number
      goalSubmissions: bigint | number
      paidAmount: bigint | number
    }
    'sendSubmission(byte[],byte[])byte[]': {
      ipfsHash: Uint8Array
      campaignHash: Uint8Array
    }
    'verifySubmission(byte[])string': {
      submissionHash: Uint8Array
    }
    'declineSubmission(byte[])string': {
      submissionHash: Uint8Array
    }
    'closeCampaign(byte[])string': {
      campaignHash: Uint8Array
    }
    'optInAsset()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'mint_coin()string': []
    'createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]': [ipfsHash: Uint8Array, payTxn: AppMethodCallTransactionArgument, depositAmount: bigint | number, feeAmount: bigint | number, goalSubmissions: bigint | number, paidAmount: bigint | number]
    'sendSubmission(byte[],byte[])byte[]': [ipfsHash: Uint8Array, campaignHash: Uint8Array]
    'verifySubmission(byte[])string': [submissionHash: Uint8Array]
    'declineSubmission(byte[])string': [submissionHash: Uint8Array]
    'closeCampaign(byte[])string': [campaignHash: Uint8Array]
    'optInAsset()string': []
  }
}

/**
 * The return type for each method
 */
export type Bount3Returns = {
  'mint_coin()string': string
  'createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]': Uint8Array
  'sendSubmission(byte[],byte[])byte[]': Uint8Array
  'verifySubmission(byte[])string': string
  'declineSubmission(byte[])string': string
  'closeCampaign(byte[])string': string
  'optInAsset()string': string
}

/**
 * Defines the types of available calls and state of the Bount3 smart contract.
 */
export type Bount3Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'mint_coin()string' | 'mint_coin', {
      argsObj: Bount3Args['obj']['mint_coin()string']
      argsTuple: Bount3Args['tuple']['mint_coin()string']
      returns: Bount3Returns['mint_coin()string']
    }>
    & Record<'createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]' | 'createCampaign', {
      argsObj: Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']
      argsTuple: Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']
      returns: Bount3Returns['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']
    }>
    & Record<'sendSubmission(byte[],byte[])byte[]' | 'sendSubmission', {
      argsObj: Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]']
      argsTuple: Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']
      returns: Bount3Returns['sendSubmission(byte[],byte[])byte[]']
    }>
    & Record<'verifySubmission(byte[])string' | 'verifySubmission', {
      argsObj: Bount3Args['obj']['verifySubmission(byte[])string']
      argsTuple: Bount3Args['tuple']['verifySubmission(byte[])string']
      returns: Bount3Returns['verifySubmission(byte[])string']
    }>
    & Record<'declineSubmission(byte[])string' | 'declineSubmission', {
      argsObj: Bount3Args['obj']['declineSubmission(byte[])string']
      argsTuple: Bount3Args['tuple']['declineSubmission(byte[])string']
      returns: Bount3Returns['declineSubmission(byte[])string']
    }>
    & Record<'closeCampaign(byte[])string' | 'closeCampaign', {
      argsObj: Bount3Args['obj']['closeCampaign(byte[])string']
      argsTuple: Bount3Args['tuple']['closeCampaign(byte[])string']
      returns: Bount3Returns['closeCampaign(byte[])string']
    }>
    & Record<'optInAsset()string' | 'optInAsset', {
      argsObj: Bount3Args['obj']['optInAsset()string']
      argsTuple: Bount3Args['tuple']['optInAsset()string']
      returns: Bount3Returns['optInAsset()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        amountEarned: bigint
        assetId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        campaigns: Map<Uint8Array | string, Campaign>
        submissions: Map<Uint8Array | string, Submission>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Bount3Signatures = keyof Bount3Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Bount3NonVoidMethodSignatures = keyof Bount3Types['methods'] extends infer T ? T extends keyof Bount3Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Bount3 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Bount3Signatures> = Bount3Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Bount3 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Bount3Signatures> = Bount3Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Bount3Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Bount3Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Bount3CreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Bount3DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Bount3CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Bount3 smart contract
 */
export abstract class Bount3ParamsFactory {
  /**
   * Constructs a no op call for the mint_coin()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mintCoin(params: CallParams<Bount3Args['obj']['mint_coin()string'] | Bount3Args['tuple']['mint_coin()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint_coin()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createCampaign(params: CallParams<Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash, params.args.payTxn, params.args.depositAmount, params.args.feeAmount, params.args.goalSubmissions, params.args.paidAmount],
    }
  }
  /**
   * Constructs a no op call for the sendSubmission(byte[],byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendSubmission(params: CallParams<Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]'] | Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendSubmission(byte[],byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ipfsHash, params.args.campaignHash],
    }
  }
  /**
   * Constructs a no op call for the verifySubmission(byte[])string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static verifySubmission(params: CallParams<Bount3Args['obj']['verifySubmission(byte[])string'] | Bount3Args['tuple']['verifySubmission(byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'verifySubmission(byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.submissionHash],
    }
  }
  /**
   * Constructs a no op call for the declineSubmission(byte[])string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static declineSubmission(params: CallParams<Bount3Args['obj']['declineSubmission(byte[])string'] | Bount3Args['tuple']['declineSubmission(byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'declineSubmission(byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.submissionHash],
    }
  }
  /**
   * Constructs a no op call for the closeCampaign(byte[])string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static closeCampaign(params: CallParams<Bount3Args['obj']['closeCampaign(byte[])string'] | Bount3Args['tuple']['closeCampaign(byte[])string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'closeCampaign(byte[])string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.campaignHash],
    }
  }
  /**
   * Constructs a no op call for the optInAsset()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInAsset(params: CallParams<Bount3Args['obj']['optInAsset()string'] | Bount3Args['tuple']['optInAsset()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInAsset()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Bount3 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Bount3Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Bount3Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Bount3Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Bount3Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Bount3 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Bount3DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new Bount3Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bount3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bount3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Bount3 smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new Bount3Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Bount3 smart contract
 */
export class Bount3Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Bount3Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Bount3 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Bount3Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Bount3NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Bount3Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Bount3Client> {
    return new Bount3Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Bount3Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Bount3Client> {
    return new Bount3Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Bount3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Bount3 smart contract using the `mint_coin()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mintCoin: (params: CallParams<Bount3Args['obj']['mint_coin()string'] | Bount3Args['tuple']['mint_coin()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Bount3ParamsFactory.mintCoin(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createCampaign: (params: CallParams<Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Bount3ParamsFactory.createCampaign(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `sendSubmission(byte[],byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendSubmission: (params: CallParams<Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]'] | Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Bount3ParamsFactory.sendSubmission(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `verifySubmission(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    verifySubmission: (params: CallParams<Bount3Args['obj']['verifySubmission(byte[])string'] | Bount3Args['tuple']['verifySubmission(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Bount3ParamsFactory.verifySubmission(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `declineSubmission(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    declineSubmission: (params: CallParams<Bount3Args['obj']['declineSubmission(byte[])string'] | Bount3Args['tuple']['declineSubmission(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Bount3ParamsFactory.declineSubmission(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `closeCampaign(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    closeCampaign: (params: CallParams<Bount3Args['obj']['closeCampaign(byte[])string'] | Bount3Args['tuple']['closeCampaign(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Bount3ParamsFactory.closeCampaign(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `optInAsset()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInAsset: (params: CallParams<Bount3Args['obj']['optInAsset()string'] | Bount3Args['tuple']['optInAsset()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Bount3ParamsFactory.optInAsset(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Bount3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Bount3 smart contract using the `mint_coin()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mintCoin: (params: CallParams<Bount3Args['obj']['mint_coin()string'] | Bount3Args['tuple']['mint_coin()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.mintCoin(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createCampaign: (params: CallParams<Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.createCampaign(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `sendSubmission(byte[],byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendSubmission: (params: CallParams<Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]'] | Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.sendSubmission(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `verifySubmission(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    verifySubmission: (params: CallParams<Bount3Args['obj']['verifySubmission(byte[])string'] | Bount3Args['tuple']['verifySubmission(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.verifySubmission(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `declineSubmission(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    declineSubmission: (params: CallParams<Bount3Args['obj']['declineSubmission(byte[])string'] | Bount3Args['tuple']['declineSubmission(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.declineSubmission(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `closeCampaign(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    closeCampaign: (params: CallParams<Bount3Args['obj']['closeCampaign(byte[])string'] | Bount3Args['tuple']['closeCampaign(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.closeCampaign(params))
    },

    /**
     * Makes a call to the Bount3 smart contract using the `optInAsset()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInAsset: (params: CallParams<Bount3Args['obj']['optInAsset()string'] | Bount3Args['tuple']['optInAsset()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Bount3ParamsFactory.optInAsset(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Bount3 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Bount3 smart contract using the `mint_coin()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mintCoin: async (params: CallParams<Bount3Args['obj']['mint_coin()string'] | Bount3Args['tuple']['mint_coin()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.mintCoin(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['mint_coin()string'])}
    },

    /**
     * Makes a call to the Bount3 smart contract using the `createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createCampaign: async (params: CallParams<Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.createCampaign(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'])}
    },

    /**
     * Makes a call to the Bount3 smart contract using the `sendSubmission(byte[],byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendSubmission: async (params: CallParams<Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]'] | Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.sendSubmission(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['sendSubmission(byte[],byte[])byte[]'])}
    },

    /**
     * Makes a call to the Bount3 smart contract using the `verifySubmission(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    verifySubmission: async (params: CallParams<Bount3Args['obj']['verifySubmission(byte[])string'] | Bount3Args['tuple']['verifySubmission(byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.verifySubmission(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['verifySubmission(byte[])string'])}
    },

    /**
     * Makes a call to the Bount3 smart contract using the `declineSubmission(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    declineSubmission: async (params: CallParams<Bount3Args['obj']['declineSubmission(byte[])string'] | Bount3Args['tuple']['declineSubmission(byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.declineSubmission(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['declineSubmission(byte[])string'])}
    },

    /**
     * Makes a call to the Bount3 smart contract using the `closeCampaign(byte[])string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    closeCampaign: async (params: CallParams<Bount3Args['obj']['closeCampaign(byte[])string'] | Bount3Args['tuple']['closeCampaign(byte[])string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.closeCampaign(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['closeCampaign(byte[])string'])}
    },

    /**
     * Makes a call to the Bount3 smart contract using the `optInAsset()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInAsset: async (params: CallParams<Bount3Args['obj']['optInAsset()string'] | Bount3Args['tuple']['optInAsset()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Bount3ParamsFactory.optInAsset(params))
      return {...result, return: result.return as unknown as (undefined | Bount3Returns['optInAsset()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Bount3Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Bount3 app
   */
  state = {
    /**
     * Methods to access global state for the current Bount3 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          amountEarned: result.amount_earned,
          assetId: result.asset_id,
        }
      },
      /**
       * Get the current value of the amount_earned key in global state
       */
      amountEarned: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amount_earned")) as bigint | undefined },
      /**
       * Get the current value of the asset_id key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_id")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Bount3 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the campaigns map in box state
       */
      campaigns: {
        /**
         * Get all current values of the campaigns map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Campaign>> => { return (await this.appClient.state.box.getMap("campaigns")) as Map<Uint8Array, Campaign> },
        /**
         * Get a current value of the campaigns map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Campaign | undefined> => { return await this.appClient.state.box.getMapValue("campaigns", key) as Campaign | undefined },
      },
      /**
       * Get values from the submissions map in box state
       */
      submissions: {
        /**
         * Get all current values of the submissions map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Submission>> => { return (await this.appClient.state.box.getMap("submissions")) as Map<Uint8Array, Submission> },
        /**
         * Get a current value of the submissions map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Submission | undefined> => { return await this.appClient.state.box.getMapValue("submissions", key) as Submission | undefined },
      },
    },
  }

  public newGroup(): Bount3Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a mint_coin()string method call against the Bount3 contract
       */
      mintCoin(params: CallParams<Bount3Args['obj']['mint_coin()string'] | Bount3Args['tuple']['mint_coin()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mintCoin(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint_coin()string', v))
        return this
      },
      /**
       * Add a createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[] method call against the Bount3 contract
       */
      createCampaign(params: CallParams<Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createCampaign(params)))
        resultMappers.push((v) => client.decodeReturnValue('createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]', v))
        return this
      },
      /**
       * Add a sendSubmission(byte[],byte[])byte[] method call against the Bount3 contract
       */
      sendSubmission(params: CallParams<Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]'] | Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendSubmission(params)))
        resultMappers.push((v) => client.decodeReturnValue('sendSubmission(byte[],byte[])byte[]', v))
        return this
      },
      /**
       * Add a verifySubmission(byte[])string method call against the Bount3 contract
       */
      verifySubmission(params: CallParams<Bount3Args['obj']['verifySubmission(byte[])string'] | Bount3Args['tuple']['verifySubmission(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.verifySubmission(params)))
        resultMappers.push((v) => client.decodeReturnValue('verifySubmission(byte[])string', v))
        return this
      },
      /**
       * Add a declineSubmission(byte[])string method call against the Bount3 contract
       */
      declineSubmission(params: CallParams<Bount3Args['obj']['declineSubmission(byte[])string'] | Bount3Args['tuple']['declineSubmission(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.declineSubmission(params)))
        resultMappers.push((v) => client.decodeReturnValue('declineSubmission(byte[])string', v))
        return this
      },
      /**
       * Add a closeCampaign(byte[])string method call against the Bount3 contract
       */
      closeCampaign(params: CallParams<Bount3Args['obj']['closeCampaign(byte[])string'] | Bount3Args['tuple']['closeCampaign(byte[])string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeCampaign(params)))
        resultMappers.push((v) => client.decodeReturnValue('closeCampaign(byte[])string', v))
        return this
      },
      /**
       * Add a optInAsset()string method call against the Bount3 contract
       */
      optInAsset(params: CallParams<Bount3Args['obj']['optInAsset()string'] | Bount3Args['tuple']['optInAsset()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInAsset(params)))
        resultMappers.push((v) => client.decodeReturnValue('optInAsset()string', v))
        return this
      },
      /**
       * Add a clear state call to the Bount3 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Bount3Composer
  }
}
export type Bount3Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint_coin()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mintCoin(params?: CallParams<Bount3Args['obj']['mint_coin()string'] | Bount3Args['tuple']['mint_coin()string']>): Bount3Composer<[...TReturns, Bount3Returns['mint_coin()string'] | undefined]>

  /**
   * Calls the createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createCampaign(params?: CallParams<Bount3Args['obj']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | Bount3Args['tuple']['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]']>): Bount3Composer<[...TReturns, Bount3Returns['createCampaign(byte[],pay,uint64,uint64,uint64,uint64)byte[]'] | undefined]>

  /**
   * Calls the sendSubmission(byte[],byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendSubmission(params?: CallParams<Bount3Args['obj']['sendSubmission(byte[],byte[])byte[]'] | Bount3Args['tuple']['sendSubmission(byte[],byte[])byte[]']>): Bount3Composer<[...TReturns, Bount3Returns['sendSubmission(byte[],byte[])byte[]'] | undefined]>

  /**
   * Calls the verifySubmission(byte[])string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifySubmission(params?: CallParams<Bount3Args['obj']['verifySubmission(byte[])string'] | Bount3Args['tuple']['verifySubmission(byte[])string']>): Bount3Composer<[...TReturns, Bount3Returns['verifySubmission(byte[])string'] | undefined]>

  /**
   * Calls the declineSubmission(byte[])string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declineSubmission(params?: CallParams<Bount3Args['obj']['declineSubmission(byte[])string'] | Bount3Args['tuple']['declineSubmission(byte[])string']>): Bount3Composer<[...TReturns, Bount3Returns['declineSubmission(byte[])string'] | undefined]>

  /**
   * Calls the closeCampaign(byte[])string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  closeCampaign(params?: CallParams<Bount3Args['obj']['closeCampaign(byte[])string'] | Bount3Args['tuple']['closeCampaign(byte[])string']>): Bount3Composer<[...TReturns, Bount3Returns['closeCampaign(byte[])string'] | undefined]>

  /**
   * Calls the optInAsset()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInAsset(params?: CallParams<Bount3Args['obj']['optInAsset()string'] | Bount3Args['tuple']['optInAsset()string']>): Bount3Composer<[...TReturns, Bount3Returns['optInAsset()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Bount3 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Bount3Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Bount3Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Bount3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Bount3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Bount3ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Bount3ComposerResults<TReturns>>
}
export type Bount3ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

